# -*- coding: utf-8 -*-
"""K Means_ETE_PA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_3cA_lbRNrq5LCS5vjUSSy9X-U2nFgHl

**K-Means Clustering**

K-Means is a centroid-based clustering algorithm that minimizes the sum of squared distances between data points and their assigned cluster centers.

Working:
*   Initialize k cluster centers randomly.
*   Assign each data point to the nearest cluster center.
*   Update cluster centers to the mean of points assigned to each cluster.
*   Repeat until convergence.
"""

!pip install scikit-learn-extra

# Import necessary libraries
import numpy as np
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score, davies_bouldin_score, calinski_harabasz_score
from sklearn.datasets import make_blobs

# Generate synthetic dataset
def generate_data(n_samples=300, n_features=2, centers=3, random_state=42):
    data, labels = make_blobs(n_samples=n_samples, n_features=n_features, centers=centers, random_state=random_state)
    return data, labels

# Evaluation metrics
def evaluate_clustering(data, clustering_labels):
    sil_score = silhouette_score(data, clustering_labels)
    db_score = davies_bouldin_score(data, clustering_labels)
    ch_score = calinski_harabasz_score(data, clustering_labels)
    return sil_score, db_score, ch_score

# K-Means clustering
def kmeans_clustering(data, n_clusters):
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    kmeans_labels = kmeans.fit_predict(data)
    return kmeans, kmeans_labels

# Main script for K-Means
if __name__ == "__main__":
    # Generate data
    data, true_labels = generate_data()

    # Apply K-Means
    kmeans, kmeans_labels = kmeans_clustering(data, n_clusters=3)

    # Evaluate K-Means
    kmeans_scores = evaluate_clustering(data, kmeans_labels)
    print("K-Means Evaluation (Silhouette, Davies-Bouldin, Calinski-Harabasz):", kmeans_scores)

"""Evaluation Metrics:

*   Silhouette Score: This measures the compactness and separation of clusters. Higher values (close to 1) indicate better-defined clusters.
*   Davies-Bouldin Score: This evaluates intra-cluster similarity and inter-cluster differences. Lower values indicate better clustering.
* Calinski-Harabasz Index: This measures the ratio of the variance between clusters to the variance within clusters. Higher values indicate well-separated clusters.  



"""

